# -*- coding: utf-8 -*-
"""Challenge 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cRa54w3CDO9MDuLx_8QTgG4XbxUbU2c3
"""

import os
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from google.colab import files



ancestry_train_data = np.loadtxt('ancestry_train.data')
ancestry_train_solution = np.loadtxt('ancestry_train.solution')
ancestry_test_data = np.loadtxt('ancestry_test.data')

X_train = pd.read_csv("ancestry_train.data", sep=" ", header=None).values
y_train = pd.read_csv("ancestry_train.solution", sep=" ", header=None).values
X_test = pd.read_csv("ancestry_test.data", sep=" ", header=None).values

X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

models = []
for i in range(y_train.shape[1]):
    model = LinearRegression()
    model.fit(X_train_split, y_train_split[:, i])
    models.append(model)

pred_combined = np.column_stack([model.predict(X_val) for model in models])

mse = mean_squared_error(y_val, pred_combined)
negative_log_mse = -np.log(mse)
print("Negative Log MSE on Validation Set:", negative_log_mse)

pred_test = np.column_stack([model.predict(X_test) for model in models])

print(pred_test[:5])

pd.DataFrame(pred_test).to_csv("predictions.csv", sep=" ", header=None, index=None)
os.system("zip -r predictions.zip predictions.csv")
files.download("predictions.zip")

print(os.getcwd())
